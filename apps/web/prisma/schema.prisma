generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  GAME_STAKE
  GAME_WIN
  GAME_DRAW_REFUND
  PLATFORM_FEE
  GAME_EXPIRED_REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum GameStatus {
  WAITING_FOR_OPPONENT
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum GameResult {
  CREATOR_WON
  OPPONENT_WON
  DRAW
  CREATOR_TIMEOUT
  OPPONENT_TIMEOUT
}

// ============================================
// MODELS
// ============================================

model User {
  id                 BigInt   @id @default(autoincrement())
  referenceId        String   @unique @default(cuid())
  code               String   @unique
  googleId           String   @unique
  email              String   @unique
  name               String
  profilePictureUrl  String?
  dateOfBirth        DateTime?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  wallet             Wallet?
  transactions       Transaction[]
  gamesAsCreator     Game[]        @relation("CreatorGames")
  gamesAsOpponent    Game[]        @relation("OpponentGames")
  gamesWon           Game[]        @relation("WinnerGames")
  stats              UserStats?

  @@index([googleId])
  @@index([email])
  @@index([code])
  @@index([referenceId])
  @@map("users")
}

model Wallet {
  id            BigInt   @id @default(autoincrement())
  referenceId   String   @unique @default(cuid())
  userId        BigInt   @unique
  balance       Decimal  @default(0) @db.Decimal(19, 2)
  lockedAmount  Decimal  @default(0) @db.Decimal(19, 2)
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([referenceId])
  @@map("wallets")
}

model Transaction {
  id            BigInt            @id @default(autoincrement())
  referenceId   String            @unique @default(cuid())
  userId        BigInt
  gameId        BigInt?
  type          TransactionType
  amount        Decimal           @db.Decimal(19, 2)
  balanceAfter  Decimal           @db.Decimal(19, 2)
  status        TransactionStatus @default(PENDING)
  metadata      Json?
  description   String
  createdAt     DateTime          @default(now())

  // Relations
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game?             @relation(fields: [gameId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([gameId])
  @@index([createdAt])
  @@index([status])
  @@index([referenceId])
  @@map("transactions")
}

model Game {
  id                      BigInt      @id @default(autoincrement())
  referenceId             String      @unique @default(cuid())
  creatorId               BigInt
  opponentId              BigInt?
  stakeAmount             Decimal     @db.Decimal(19, 2)
  totalPot                Decimal     @db.Decimal(19, 2)
  platformFeePercentage   Decimal     @db.Decimal(5, 2)
  platformFeeAmount       Decimal     @db.Decimal(19, 2)
  status                  GameStatus  @default(WAITING_FOR_OPPONENT)
  result                  GameResult?
  winnerId                BigInt?
  
  // Time control fields
  initialTimeSeconds      Int
  incrementSeconds        Int
  creatorTimeRemaining    Int
  opponentTimeRemaining   Int
  lastMoveAt              DateTime?
  
  // Game data
  gameData                Json?
  inviteCode              String      @unique
  
  // Timestamps
  expiresAt               DateTime
  startedAt               DateTime?
  completedAt             DateTime?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt

  // Relations
  creator                 User        @relation("CreatorGames", fields: [creatorId], references: [id], onDelete: Cascade)
  opponent                User?       @relation("OpponentGames", fields: [opponentId], references: [id], onDelete: Cascade)
  winner                  User?       @relation("WinnerGames", fields: [winnerId], references: [id], onDelete: SetNull)
  transactions            Transaction[]

  @@index([creatorId])
  @@index([opponentId])
  @@index([winnerId])
  @@index([inviteCode])
  @@index([status])
  @@index([expiresAt])
  @@index([referenceId])
  @@map("games")
}

model UserStats {
  id                      BigInt    @id @default(autoincrement())
  referenceId             String    @unique @default(cuid())
  userId                  BigInt    @unique
  totalGamesPlayed        Int       @default(0)
  gamesWon                Int       @default(0)
  gamesLost               Int       @default(0)
  gamesDrawn              Int       @default(0)
  totalMoneyWon           Decimal   @default(0) @db.Decimal(19, 2)
  totalMoneyLost          Decimal   @default(0) @db.Decimal(19, 2)
  totalPlatformFeesPaid   Decimal   @default(0) @db.Decimal(19, 2)
  netProfit               Decimal   @default(0) @db.Decimal(19, 2)
  currentWinStreak        Int       @default(0)
  longestWinStreak        Int       @default(0)
  averageGameDuration     Int?
  lastPlayedAt            DateTime?
  updatedAt               DateTime  @updatedAt

  // Relations
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([referenceId])
  @@map("user_stats")
}
